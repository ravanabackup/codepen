"use strict";
const { Engine, Scene, ArcRotateCamera, Vector3, MeshBuilder, PBRMaterial, PointLight, DefaultRenderingPipeline, SolidParticleSystem, CSG } = BABYLON;
const canvas = document.querySelector('canvas');
const engine = new Engine(canvas);
const scene = new Scene(engine);
scene.clearColor.set(0, 0, 0, 1);
const camera = new ArcRotateCamera('', -Math.PI / 2, Math.PI / 2, 100, new Vector3(0, 0, 0), scene);
camera.attachControl(canvas);
const mat = new PBRMaterial('', scene);
mat.roughness = 0.2;
mat.metallic = 0.5;
mat.alpha = 0.5;
mat.backFaceCulling = false;
const box0 = MeshBuilder.CreateBox('', { size: 12 });
const box1 = MeshBuilder.CreateSphere('', { diameter: 20, segments: 1 }); // magic
const box = CSG.FromMesh(box0).subtract(CSG.FromMesh(box1)).toMesh('', mat, scene, false);
box0.dispose();
box1.dispose();
const light = new PointLight('', new Vector3(0, 0, 0), scene);
light.intensity = 1.5e4;
const rnds = (a = 0, b = 1) => (a + Math.random() * (b - a)) * (Math.random() < 0.5 ? -1 : 1);
const sps = new SolidParticleSystem('', scene, {});
sps.addShape(box, 1.2e3);
sps.updateParticle = (p) => {
    var _a;
    (_a = p.color) === null || _a === void 0 ? void 0 : _a.set(Math.random(), Math.random() * 0.5, Math.random(), 1);
    p.position.set(rnds(0, 50), rnds(0, 110), rnds(0, 50));
    p.rotation.set(rnds(0, 2 * Math.PI), rnds(0, 2 * Math.PI), 0);
    return p;
};
const spsmesh = sps.buildMesh();
box.dispose();
sps.setParticles();
spsmesh.material = mat;
spsmesh.alwaysSelectAsActiveMesh = true;
scene.onBeforeRenderObservable.add(() => spsmesh.rotation.y -= 0.001);
const pp = new DefaultRenderingPipeline('');
pp.bloomEnabled = true;
pp.bloomWeight = 0.2;
pp.sharpenEnabled = true;
pp.sharpen.edgeAmount = 1;
window.onresize = () => engine.resize();
engine.runRenderLoop(() => scene.render());